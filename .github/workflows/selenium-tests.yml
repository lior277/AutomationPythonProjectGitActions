name: Selenium Grid Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  actions: read

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip setuptools wheel
        pip install -r requirements.txt
        mkdir -p test-results

    - name: Set up Docker Compose
      run: |
        DOCKER_CONFIG=${DOCKER_CONFIG:-$HOME/.docker}
        mkdir -p $DOCKER_CONFIG/cli-plugins
        curl -SL https://github.com/docker/compose/releases/download/v2.24.1/docker-compose-linux-x86_64 -o $DOCKER_CONFIG/cli-plugins/docker-compose
        chmod +x $DOCKER_CONFIG/cli-plugins/docker-compose

    - name: Clean up existing Docker resources
      run: |
        docker system prune -af
        docker network prune -f
        docker compose down --remove-orphans || true

    - name: Create Selenium Grid Network
      run: |
        docker network create selenium-grid || true

    - name: Start Selenium Grid
      run: |
        docker compose up -d selenium-hub chrome
        
        # Enhanced wait mechanism for Selenium Grid
        echo "Waiting for Selenium Grid to be ready..."
        max_attempts=20
        attempt=0
        
        while [ $attempt -lt $max_attempts ]; do
          if curl -s http://localhost:4444/wd/hub/status > /dev/null; then
            echo "Selenium Grid is ready!"
            break
          fi
          
          echo "Waiting... (attempt $((attempt+1))/$max_attempts)"
          sleep 10
          attempt=$((attempt+1))
        done
        
        if [ $attempt -eq $max_attempts ]; then
          echo "Selenium Grid failed to start"
          docker compose logs
          exit 1
        fi

    - name: Run tests
      run: |
        mkdir -p test-results

        # Print Dockerfile contents for debugging
        echo "Dockerfile contents:"
        cat Dockerfile

        # Build with verbose output
        docker compose build test-runner

        # List contents of the test-runner container
        docker compose run --rm test-runner ls -la /app

        # Run tests
        docker compose run --rm test-runner || true

        # Check test results directory
        ls -la test-results

    - name: Print logs on failure
      if: failure()
      run: |
        echo "Selenium Hub Logs:"
        docker compose logs selenium-hub
        echo -e "\nChrome Node Logs:"
        docker compose logs chrome
        echo -e "\nTest Runner Logs:"
        docker compose logs test-runner

    - name: Slack Notification
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: 'Workflow failed!'
        fields: repo,message,commit,author,action,eventName,ref,workflow
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

    - name: Cleanup
      if: always()
      run: |
        docker compose down --remove-orphans
        docker network rm selenium-grid || true
        docker system prune -af